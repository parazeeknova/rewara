generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id                 String   @id @default(cuid())
  customerId         String   @unique
  name               String
  age                Int
  email              String   @unique
  averageBuyingPrice Float
  discountApplied    Int
  totalSpending      Float
  location           String
  lastPurchase       DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Optional relations that could be added
  // orders            Order[]
  // coupons           CouponUsage[]
}

model Coupon {
  id         String   @id @default(cuid())
  code       String   @unique
  discount   Float
  type       String
  category   String
  validUntil DateTime
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Optional relation
  // usages           CouponUsage[]
}

// Optional join table for many-to-many relationship
// model CouponUsage {
//   id         String   @id @default(cuid())
//   customerId String
//   couponId   String
//   usedAt     DateTime @default(now())
//   
//   customer   Customer @relation(fields: [customerId], references: [id])
//   coupon     Coupon   @relation(fields: [couponId], references: [id])
//   
//   @@unique([customerId, couponId])
// }
